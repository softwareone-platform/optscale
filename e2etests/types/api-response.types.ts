import { Locator } from '@playwright/test';

export interface LiveDemoAuthResponse {
  organization_id: string;
  email: string;
  password: string;
  created_at: number;
}

export interface LiveDemoAuthResponse {
  organization_id: string;
  email: string;
  password: string;
  created_at: number;
}

export interface DemoAuthCredentials extends LiveDemoAuthResponse {
  baseApiUrl: string;
}

export interface AuthResponse {
  created_at: string;
  digest: string;
  ip: string;
  token: string;
  user_email: string;
  user_id: string;
  valid_until: string;
}

export interface UsersResponse {
  users: [
    {
      created_at: number;
      deleted_at: number;
      id: string;
      display_name: string;
      is_active: boolean;
      type_id: number;
      email: string;
      verified: boolean;
      scope_id: string;
      slack_connected: boolean;
      is_password_autogenerated: boolean;
      jira_connected: boolean;
      last_login: number;
    },
  ];
}

export interface ServiceNameExpenseSummary {
  total: number;
  previous_total: number;
}

export interface ServiceNameExpensesResponse {
  start_date: number;
  end_date: number;
  breakdown_by: 'service_name';
  counts: Record<string, ServiceNameExpenseSummary>;
  breakdown: Record<string, Record<string, { cost: number }>>;
}

export interface ServiceNameResourceSummary {
  total: number;
  average: number;
}

export interface ServiceNameResourceResponse {
  start_date: number;
  end_date: number;
  breakdown_by: 'service_name';
  counts: Record<string, ServiceNameResourceSummary>;
  breakdown: Record<string, unknown>; // Update if you know what it looks like
}

export interface TagsBreakdownItem {
  tag: string | null;
  count: number;
  cost: number;
}

export interface TagsResponse {
  start_date: number;
  end_date: number;
  breakdown: TagsBreakdownItem[];
}

export interface RegionExpenseSummary {
  total: number;
  previous_total: number;
}

export interface RegionBreakdownEntry {
  [regionName: string]: {
    cost: number;
  };
}

export interface RegionExpensesResponse {
  start_date: number;
  end_date: number;
  breakdown_by: 'region';
  previous_range_start: number;
  total: number;
  previous_total: number;
  counts: Record<string, RegionExpenseSummary>;
  breakdown: Record<string, RegionBreakdownEntry>;
}

export interface ResourceTypeBreakdownItem {
  cost: number;
}

export interface ResourceTypeExpensesResponse {
  start_date: number;
  end_date: number;
  previous_range_start: number;
  breakdown_by: string;
  total: number;
  breakdown: {
    [timestamp: string]: {
      [resourceType: string]: ResourceTypeBreakdownItem;
    };
  };
  counts: {
    [resourceType: string]: {
      total: number;
      previous_total: number;
    };
  };
}

export interface DataSourceSummary {
  total: number;
  previous_total: number;
  id: string;
  name: string;
  type: string;
}

export interface DataSourceBreakdownItem {
  cost: number;
  id: string;
  name: string;
  type: string;
}

export interface DataSourceExpensesResponse {
  start_date: number;
  end_date: number;
  previous_range_start: number;
  total: number;
  breakdown_by: 'cloud_account_id'; // ‚Üê API term
  counts: Record<string, DataSourceSummary>;
  breakdown: Record<string, Record<string, DataSourceBreakdownItem>>;
}

export interface OwnerSummary {
  total: number;
  previous_total: number;
  id: string;
  name: string;
}

export interface OwnerBreakdownItem {
  cost: number;
  id: string;
  name: string;
}

export interface OwnerExpensesResponse {
  start_date: number;
  end_date: number;
  previous_range_start: number;
  total: number;
  previous_total: number;
  breakdown_by: 'employee_id'; // Matches API field
  counts: Record<string, OwnerSummary>;
  breakdown: Record<string, Record<string, OwnerBreakdownItem>>;
}

export interface PoolSummary {
  total: number;
  previous_total: number;
  id: string;
  name: string;
  purpose: string;
}

export interface PoolBreakdownItem {
  cost: number;
  id: string;
  name: string;
  purpose: string;
}

export interface PoolExpensesResponse {
  start_date: number;
  end_date: number;
  previous_range_start: number;
  total: number;
  breakdown_by: 'pool_id';
  counts: Record<string, PoolSummary>;
  breakdown: Record<string, Record<string, PoolBreakdownItem>>;
}

export interface K8sNodeSummary {
  total: number;
  previous_total: number;
}

export interface K8sNodeBreakdownItem {
  cost: number;
}

export interface K8sNodeExpensesResponse {
  start_date: number;
  end_date: number;
  previous_range_start: number;
  total: number;
  previous_total: number;
  breakdown_by: 'k8s_node';
  counts: Record<string, K8sNodeSummary>;
  breakdown: Record<string, Record<string, K8sNodeBreakdownItem>>;
}

export interface K8sNamespaceSummary {
  total: number;
  previous_total: number;
}

export interface K8sNamespaceBreakdownItem {
  cost: number;
}

export interface K8sNamespaceExpensesResponse {
  start_date: number;
  end_date: number;
  previous_range_start: number;
  total: number;
  previous_total: number;
  breakdown_by: 'k8s_namespace';
  counts: Record<string | null, K8sNamespaceSummary>;
  breakdown: Record<string, Record<string | null, K8sNamespaceBreakdownItem>>;
}

export interface K8sServiceSummary {
  total: number;
  previous_total: number;
}

export interface K8sServiceBreakdownItem {
  cost: number;
}

export interface K8sServiceExpensesResponse {
  start_date: number;
  end_date: number;
  previous_range_start: number;
  total: number;
  previous_total: number;
  breakdown_by: 'k8s_service';
  counts: Record<string, K8sServiceSummary>;
  breakdown: Record<string, Record<string, K8sServiceBreakdownItem>>;
}

export interface DataSourceResponse {
  data: {
    dataSource: {
      account_id: string;
      id: string;
      last_getting_metric_attempt_at: number;
      last_getting_metric_attempt_error: string;
      last_getting_metrics_at: number;
      last_import_at: number;
      last_import_attempt_at: number;
      last_import_attempt_error: string;
      name: string;
      parent_id: string;
      type: string;
      details: {
        cost: number;
        discovery_infos: DataSourceDiscoveryInfo[];
        forecast: number;
        last_month_cost: number;
        resources: number;
        __typename: string;
      };
      config: {
        client_id: string;
        expense_import_scheme: string;
        subscription_id: string;
        tenant: string;
        export_name: string | null;
        container: string | null;
        directory: string | null;
        __typename: string;
      };
      __typename: string;
    };
  };
}

export interface DataSourceDiscoveryInfo {
  cloud_account_id: string;
  created_at: number;
  deleted_at: number;
  enabled: boolean;
  id: string;
  last_discovery_at: number;
  last_error: string | null;
  last_error_at: number;
  observe_time: number;
  resource_type: string;
  __typename: string;
}

export interface CloudAccountsResponse {
  cloud_accounts: CloudAccount[];
}

export interface CloudAccount {
  deleted_at: number;
  id: string;
  created_at: number;
  name: string;
  type: string;
  config: {
    client_id: string;
    secret: string;
    tenant: string;
    skipped_subscriptions: any;
    subscription_id: string;
    expense_import_scheme: string;
  };
  organization_id: string;
  auto_import: boolean;
  import_period: number;
  last_import_at: number;
  last_import_modified_at: number;
  account_id: string;
  process_recommendations: boolean;
  last_import_attempt_at: number;
  last_import_attempt_error: string;
  last_getting_metrics_at: number;
  last_getting_metric_attempt_at: number;
  last_getting_metric_attempt_error: string;
  cleaned_at: number;
  parent_id: string;
}

export type CardSavingsData = {
  name: string;
  cardLocator: Locator;
  seeAllBtn: Locator;
  tableLocator: Locator;
  modalColumnLocator: Locator;
};

export interface ExpensesResponse {
  expenses: {
    total: number;
    previous_total: number;
    previous_range_start: number;
    id: string;
    name: string;
    breakdown: {
      [timestamp: number]: number;
    };
  };
}

export interface ExpensesFilterByDataSourceResponse {
  expenses: {
    total: number;
    previous_total: number;
    previous_range_start: number;
    id: string;
    name: string;
    breakdown: Record<`${number}`, DataSourceExpense[]>;
    cloud: CloudTotals[];
  };
}

export interface DataSourceExpense {
  id: string;
  name: string;
  type: string;
  expense: number;
}

export interface CloudTotals {
  id: string;
  name: string;
  type: string;
  total: number;
  previous_total: number;
}
