import {Locator} from "@playwright/test";

export interface AuthResponse {
  created_at: string;
  digest: string;
  ip: string
  token: string;
  user_email: string;
  user_id: string;
  valid_until: string;
}

export interface UsersResponse {
  users: [
    {
      created_at: number,
      deleted_at: number,
      id: string,
      display_name: string,
      is_active: boolean,
      type_id: number,
      email: string,
      verified: boolean,
      scope_id: string,
      slack_connected: boolean,
      is_password_autogenerated: boolean,
      jira_connected: boolean,
      last_login: number
    }
  ]
}

export interface ServiceNameExpenseSummary {
  total: number;
  previous_total: number;
}

export interface ServiceNameExpensesResponse {
  start_date: number;
  end_date: number;
  breakdown_by: 'service_name';
  counts: Record<string, ServiceNameExpenseSummary>;
  breakdown: Record<string, Record<string, { cost: number }>>;
}

export interface ServiceNameResourceSummary {
  total: number;
  average: number;
}

export interface ServiceNameResourceResponse {
  start_date: number;
  end_date: number;
  breakdown_by: 'service_name';
  counts: Record<string, ServiceNameResourceSummary>;
  breakdown: Record<string, unknown>; // Update if you know what it looks like
}

export interface TagsBreakdownItem {
  tag: string | null;
  count: number;
  cost: number;
}

export interface TagsResponse {
  start_date: number;
  end_date: number;
  breakdown: TagsBreakdownItem[];
}

export interface RegionExpenseSummary {
  total: number;
  previous_total: number;
}

export interface RegionBreakdownEntry {
  [regionName: string]: {
    cost: number;
  };
}

export interface RegionExpensesResponse {
  start_date: number;
  end_date: number;
  breakdown_by: 'region';
  previous_range_start: number;
  total: number;
  previous_total: number;
  counts: Record<string, RegionExpenseSummary>;
  breakdown: Record<string, RegionBreakdownEntry>;
}

export interface ResourceTypeBreakdownItem {
  cost: number;
}

export interface ResourceTypeExpensesResponse {
  start_date: number;
  end_date: number;
  previous_range_start: number;
  breakdown_by: string;
  total: number;
  breakdown: {
    [timestamp: string]: {
      [resourceType: string]: ResourceTypeBreakdownItem;
    };
  };
  counts: {
    [resourceType: string]: {
      total: number;
      previous_total: number;
    };
  };
}

export interface DataSourceSummary {
  total: number;
  previous_total: number;
  id: string;
  name: string;
  type: string;
}

export interface DataSourceBreakdownItem {
  cost: number;
  id: string;
  name: string;
  type: string;
}

export interface DataSourceExpensesResponse {
  start_date: number;
  end_date: number;
  previous_range_start: number;
  total: number;
  breakdown_by: 'cloud_account_id';  // ‚Üê API term
  counts: Record<string, DataSourceSummary>;
  breakdown: Record<string, Record<string, DataSourceBreakdownItem>>;
}

export interface OwnerSummary {
  total: number;
  previous_total: number;
  id: string;
  name: string;
}

export interface OwnerBreakdownItem {
  cost: number;
  id: string;
  name: string;
}

export interface OwnerExpensesResponse {
  start_date: number;
  end_date: number;
  previous_range_start: number;
  total: number;
  previous_total: number;
  breakdown_by: 'employee_id'; // Matches API field
  counts: Record<string, OwnerSummary>;
  breakdown: Record<string, Record<string, OwnerBreakdownItem>>;
}

export interface PoolSummary {
  total: number;
  previous_total: number;
  id: string;
  name: string;
  purpose: string;
}

export interface PoolBreakdownItem {
  cost: number;
  id: string;
  name: string;
  purpose: string;
}

export interface PoolExpensesResponse {
  start_date: number;
  end_date: number;
  previous_range_start: number;
  total: number;
  breakdown_by: 'pool_id';
  counts: Record<string, PoolSummary>;
  breakdown: Record<string, Record<string, PoolBreakdownItem>>;
}

export interface K8sNodeSummary {
  total: number;
  previous_total: number;
}

export interface K8sNodeBreakdownItem {
  cost: number;
}

export interface K8sNodeExpensesResponse {
  start_date: number;
  end_date: number;
  previous_range_start: number;
  total: number;
  previous_total: number;
  breakdown_by: 'k8s_node';
  counts: Record<string, K8sNodeSummary>;
  breakdown: Record<string, Record<string, K8sNodeBreakdownItem>>;
}

export interface K8sNamespaceSummary {
  total: number;
  previous_total: number;
}

export interface K8sNamespaceBreakdownItem {
  cost: number;
}

export interface K8sNamespaceExpensesResponse {
  start_date: number;
  end_date: number;
  previous_range_start: number;
  total: number;
  previous_total: number;
  breakdown_by: 'k8s_namespace';
  counts: Record<string | null, K8sNamespaceSummary>;
  breakdown: Record<string, Record<string | null, K8sNamespaceBreakdownItem>>;
}

export interface K8sServiceSummary {
  total: number;
  previous_total: number;
}

export interface K8sServiceBreakdownItem {
  cost: number;
}

export interface K8sServiceExpensesResponse {
  start_date: number;
  end_date: number;
  previous_range_start: number;
  total: number;
  previous_total: number;
  breakdown_by: 'k8s_service';
  counts: Record<string, K8sServiceSummary>;
  breakdown: Record<string, Record<string, K8sServiceBreakdownItem>>;
}

export type CardSavingsData = {
  name: string;
  cardLocator: Locator;
  seeAllBtn: Locator;
  tableLocator: Locator;
  modalColumnLocator: Locator;
};
