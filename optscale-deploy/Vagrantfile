# -*- mode: ruby -*-
# vi: set ft=ruby :

unless Vagrant.has_plugin?("vagrant-qemu")
  raise Vagrant::Errors::VagrantError.new, "vagrant-qemu plugin is missing. Please install it using 'vagrant plugin install vagrant-qemu'"
end

X86_64_ARCHITECTURES = ["x86_64", "amd64"]
ARM_64_ARCHITECTURES = ["arm64", "aarch64", "aarch64_be", "armv8b", "armv8l"]

def cpu_emulated?(guest_cpu_arch)
  host_cpu_arch = `uname -m`.strip

  [X86_64_ARCHITECTURES, ARM_64_ARCHITECTURES].each do |aliases|
    if aliases.include?(host_cpu_arch)
      return !aliases.include?(guest_cpu_arch)
    end
  end

  raise RuntimeError, "Unknown host CPU architecture: #{host_cpu_arch}"
end

def define_vm(config, name:, arch:, base_box:, ports:)
  opts = {
    primary: !cpu_emulated?(arch),
    autostart: !cpu_emulated?(arch),
  } 
  
  config.vm.define name, opts do |vm_config|
    vm_config.vm.box = "cloud-image/ubuntu-24.04"
    
    if X86_64_ARCHITECTURES.include?(arch)
      vm_config.vm.box_architecture = "amd64"
    elsif ARM_64_ARCHITECTURES.include?(arch)
      vm_config.vm.box_architecture = "arm64"
    else
      raise RuntimeError, "Unsupported architecture: #{arch}"
    end
    
    vm_config.vm.hostname = name

    vm_config.vm.network "forwarded_port", guest: 80, host: ports[:http]
    vm_config.vm.network "forwarded_port", guest: 443, host: ports[:https]
    
    vm_config.vagrant.plugins = "vagrant-qemu"
    
    vm_config.vm.provider "qemu" do |qemu|
      qemu.memory = "8G"
      qemu.net_device = "virtio-net-pci"
      qemu.disk_resize = "64G"

      # default to OS install, but also support homebrew
      if Dir.exist?("/usr/share/qemu") 
        qemu.qemu_dir = "/usr/share/qemu"
      elsif ENV["HOMEBREW_PREFIX"] && Dir.exist?("#{ENV["HOMEBREW_PREFIX"]}/share/qemu")
        qemu.qemu_dir = "#{ENV["HOMEBREW_PREFIX"]}/share/qemu"
      else
        raise RuntimeError, "QEMU directory not found. Please ensure QEMU is installed."
      end

      if cpu_emulated?(arch)
        qemu.cpu = 'max'
        accelerator = 'tcg,thread=multi,tb-size=512'
      else
        qemu.cpu = 'host'

        if Vagrant::Util::Platform.linux?
          accelerator = 'kvm'
        elsif Vagrant::Util::Platform.darwin?
          accelerator = 'hvf'
        else
          raise RuntimeError, "Unsupported platform: #{Vagrant::Util::Platform.platform}"
        end
      end

      qemu.extra_qemu_args = ['-accel', accelerator]
      qemu.ssh_port = ports[:ssh]
      
      if X86_64_ARCHITECTURES.include?(arch)
        qemu.arch = "x86_64"
        qemu.machine = "q35"
        qemu.smp = "cpus=2,sockets=1,cores=2,threads=1"
      elsif ARM_64_ARCHITECTURES.include?(arch)
        qemu.arch = "aarch64"
        qemu.machine = "virt,gic-version=3"
        qemu.smp = "cores=4,threads=1"
      else
        raise RuntimeError, "Unsupported architecture: #{arch}"
      end
    end
  end
end

Vagrant.configure(2) do |config|
  config.vm.synced_folder "..", "/home/vagrant/optscale", type: "rsync",
    rsync__exclude: [
      "*/.venv/",
      "optscale-deploy/.vagrant/",
    ]
  
  define_vm(
    config,
    name: "ubuntu-2404-arm-64",
    arch: "arm64",
    base_box: "cloud-image/ubuntu-24.04",
    ports: {
      http: 8081,
      https: 8444,
      ssh: 50223,
    }
  )

  define_vm(
    config,
    name: "ubuntu-2404-x86-64",
    arch: "x86_64",
    base_box: "cloud-image/ubuntu-24.04",
    ports: {
      http: 8080,
      https: 8443,
      ssh: 50222,
    }
  )
end

