scalar JSONObject

# use enum to get types for the "dataSource.type" field in revolver
enum DataSourceType {
  aws_cnr
  azure_tenant
  azure_cnr
  gcp_cnr
  gcp_tenant
  alibaba_cnr
  nebius
  databricks
  kubernetes_cnr
  environment
}

type DataSourceDiscoveryInfos {
  cloud_account_id: String!
  created_at: Int!
  deleted_at: Int!
  enabled: Boolean
  id: String!
  last_discovery_at: Int!
  last_error: String
  last_error_at: Int!
  observe_time: Int!
  resource_type: String
}

type DataSourceDetails {
  cost: Float!
  discovery_infos: [DataSourceDiscoveryInfos]
  forecast: Float!
  last_month_cost: Float
  resources: Int!
}

interface DataSourceInterface {
  id: String
  name: String
  type: DataSourceType
  parent_id: String
  account_id: String
  last_import_at: Int
  last_import_attempt_at: Int
  last_import_attempt_error: String
  last_getting_metrics_at: Int
  last_getting_metric_attempt_at: Int
  last_getting_metric_attempt_error: String
  details: DataSourceDetails
}

# AWS data source
type AwsConfig {
  access_key_id: String
  linked: Boolean
  use_edp_discount: Boolean
  cur_version: Int
  bucket_name: String
  bucket_prefix: String
  config_scheme: String
  region_name: String
  report_name: String
}

type AwsDataSource implements DataSourceInterface {
  id: String!
  name: String!
  type: DataSourceType!
  parent_id: String
  account_id: String!
  last_import_at: Int!
  last_import_attempt_at: Int!
  last_import_attempt_error: String
  last_getting_metrics_at: Int!
  last_getting_metric_attempt_at: Int!
  last_getting_metric_attempt_error: String
  details: DataSourceDetails
  config: AwsConfig
}

# Azure tenant data source
type AzureTenantConfig {
  client_id: String
  tenant: String
}

type AzureTenantDataSource implements DataSourceInterface {
  id: String!
  name: String!
  type: DataSourceType!
  parent_id: String
  account_id: String!
  last_import_at: Int!
  last_import_attempt_at: Int!
  last_import_attempt_error: String
  last_getting_metrics_at: Int!
  last_getting_metric_attempt_at: Int!
  last_getting_metric_attempt_error: String
  details: DataSourceDetails
  config: AzureTenantConfig
}

# Azure subscription data source
type AzureSubscriptionConfig {
  client_id: String
  expense_import_scheme: String
  subscription_id: String
  tenant: String
}

type AzureSubscriptionDataSource implements DataSourceInterface {
  id: String!
  name: String!
  type: DataSourceType!
  parent_id: String
  account_id: String!
  last_import_at: Int!
  last_import_attempt_at: Int!
  last_import_attempt_error: String
  last_getting_metrics_at: Int!
  last_getting_metric_attempt_at: Int!
  last_getting_metric_attempt_error: String
  details: DataSourceDetails
  config: AzureSubscriptionConfig
}

# GCP data source
type GcpBillingDataConfig {
  dataset_name: String
  table_name: String
  project_id: String
}

type GcpConfig {
  billing_data: GcpBillingDataConfig
}

type GcpDataSource implements DataSourceInterface {
  id: String!
  name: String!
  type: DataSourceType!
  parent_id: String
  account_id: String!
  last_import_at: Int!
  last_import_attempt_at: Int!
  last_import_attempt_error: String
  last_getting_metrics_at: Int!
  last_getting_metric_attempt_at: Int!
  last_getting_metric_attempt_error: String
  details: DataSourceDetails
  config: GcpConfig
}

# GCP tenant data source
type GcpTenantBillingDataConfig {
  dataset_name: String
  table_name: String
  project_id: String
}

type GcpTenantConfig {
  billing_data: GcpTenantBillingDataConfig
}

type GcpTenantDataSource implements DataSourceInterface {
  id: String!
  name: String!
  type: DataSourceType!
  parent_id: String
  account_id: String
  last_import_at: Int!
  last_import_attempt_at: Int!
  last_import_attempt_error: String
  last_getting_metrics_at: Int!
  last_getting_metric_attempt_at: Int!
  last_getting_metric_attempt_error: String
  details: DataSourceDetails
  config: GcpTenantConfig
}

# Alibaba data source
type AlibabaConfig {
  access_key_id: String
}

type AlibabaDataSource implements DataSourceInterface {
  id: String!
  name: String!
  type: DataSourceType!
  parent_id: String
  account_id: String!
  last_import_at: Int!
  last_import_attempt_at: Int!
  last_import_attempt_error: String
  last_getting_metrics_at: Int!
  last_getting_metric_attempt_at: Int!
  last_getting_metric_attempt_error: String
  details: DataSourceDetails
  config: AlibabaConfig
}

# Nebius data source
type NebiusConfig {
  cloud_name: String
  service_account_id: String
  key_id: String
  access_key_id: String
  # Make bucket name and prefix optional to fix conflicting types
  # to make it compatible with the AwsConfig type
  bucket_name: String
  bucket_prefix: String
}

type NebiusDataSource implements DataSourceInterface {
  id: String!
  name: String!
  type: DataSourceType!
  parent_id: String
  account_id: String!
  last_import_at: Int!
  last_import_attempt_at: Int!
  last_import_attempt_error: String
  last_getting_metrics_at: Int!
  last_getting_metric_attempt_at: Int!
  last_getting_metric_attempt_error: String
  details: DataSourceDetails
  config: NebiusConfig
}

# Databricks data source
type DatabricksConfig {
  account_id: String
  client_id: String
}

type DatabricksDataSource implements DataSourceInterface {
  id: String!
  name: String!
  type: DataSourceType!
  parent_id: String
  account_id: String!
  last_import_at: Int!
  last_import_attempt_at: Int!
  last_import_attempt_error: String
  last_getting_metrics_at: Int!
  last_getting_metric_attempt_at: Int!
  last_getting_metric_attempt_error: String
  details: DataSourceDetails
  config: DatabricksConfig
}

# K8s data source
type K8CostModelConfig {
  cpu_hourly_cost: Float!
  memory_hourly_cost: Float!
}

type K8sConfig {
  cost_model: K8CostModelConfig
  user: String!
}

type K8sDataSource implements DataSourceInterface {
  id: String!
  name: String!
  type: DataSourceType!
  parent_id: String
  account_id: String!
  last_import_at: Int!
  last_import_attempt_at: Int!
  last_import_attempt_error: String
  last_getting_metrics_at: Int!
  last_getting_metric_attempt_at: Int!
  last_getting_metric_attempt_error: String
  details: DataSourceDetails
  config: K8sConfig
}

# Environment data source
type EnvironmentDataSource implements DataSourceInterface {
  id: String!
  name: String!
  type: DataSourceType!
  parent_id: String
  account_id: String!
  last_import_at: Int!
  last_import_attempt_at: Int!
  last_import_attempt_error: String
  last_getting_metrics_at: Int!
  last_getting_metric_attempt_at: Int!
  last_getting_metric_attempt_error: String
  details: DataSourceDetails
}

input DataSourceRequestParams {
  details: Boolean
}

input AwsRootConfigInput {
  access_key_id: String!
  secret_access_key: String!
  use_edp_discount: Boolean
  cur_version: Int
  bucket_name: String
  bucket_prefix: String
  config_scheme: String
  report_name: String
}

input AwsLinkedConfigInput {
  access_key_id: String!
  secret_access_key: String!
  linked: Boolean!
}

input AzureSubscriptionConfigInput {
  client_id: String!
  secret: String!
  subscription_id: String!
  tenant: String!
}

input AzureTenantConfigInput {
  client_id: String!
  secret: String!
  tenant: String!
}

input GcpBillingDataConfigInput {
  dataset_name: String!
  table_name: String!
  project_id: String
}

input GcpConfigInput {
  billing_data: GcpBillingDataConfigInput!
  credentials: JSONObject!
}

input GcpTenantConfigInput {
  billing_data: GcpBillingDataConfigInput!
  credentials: JSONObject!
}

input AlibabaConfigInput {
  access_key_id: String!
  secret_access_key: String!
}

input NebiusConfigInput {
  cloud_name: String!
  service_account_id: String!
  key_id: String!
  private_key: String!
  access_key_id: String!
  secret_access_key: String!
  bucket_name: String!
  bucket_prefix: String
}

input K8sConfigInput {
  password: String!
  user: String!
  cost_model: JSONObject
}

input DatabricksConfigInput {
  account_id: String!
  client_id: String!
  client_secret: String!
}

input CreateDataSourceInput {
  name: String
  type: String
  awsRootConfig: AwsRootConfigInput
  awsLinkedConfig: AwsLinkedConfigInput
  azureSubscriptionConfig: AzureSubscriptionConfigInput
  azureTenantConfig: AzureTenantConfigInput
  gcpConfig: GcpConfigInput
  gcpTenantConfig: GcpTenantConfigInput
  alibabaConfig: AlibabaConfigInput
  nebiusConfig: NebiusConfigInput
  databricksConfig: DatabricksConfigInput
  k8sConfig: K8sConfigInput
}

input UpdateDataSourceInput {
  name: String
  lastImportAt: Int
  lastImportModifiedAt: Int
  awsRootConfig: AwsRootConfigInput
  awsLinkedConfig: AwsLinkedConfigInput
  azureSubscriptionConfig: AzureSubscriptionConfigInput
  azureTenantConfig: AzureTenantConfigInput
  gcpConfig: GcpConfigInput
  gcpTenantConfig: GcpTenantConfigInput
  alibabaConfig: AlibabaConfigInput
  nebiusConfig: NebiusConfigInput
  databricksConfig: DatabricksConfigInput
  k8sConfig: K8sConfigInput
}

type EmployeeEmail {
  id: ID!
  employee_id: ID!
  email_template: String!
  enabled: Boolean!
  available_by_role: Boolean!
}

input UpdateEmployeeEmailsInput {
  enable: [ID!]
  disable: [ID!]
}

enum UpdateEmployeeEmailsAction {
  enable
  disable
}

input UpdateEmployeeEmailInput {
  emailId: ID!
  action: UpdateEmployeeEmailsAction!
}

type Organization {
  id: String!
  name: String!
  is_demo: Boolean!
  currency: String!
  pool_id: String!
}

type Employee {
  id: String!
  jira_connected: Boolean!
  slack_connected: Boolean!
}

type InvitationAssignment {
  id: String!
  scope_id: String!
  scope_name: String!
  scope_type: String!
  purpose: String!
}

type Invitation {
  id: String!
  owner_name: String!
  owner_email: String!
  organization: String!
  invite_assignments: [InvitationAssignment!]
}

type OptscaleMode {
  finops: Boolean
  mlops: Boolean
}

input OptscaleModeParams {
  finops: Boolean
  mlops: Boolean
}

input UpdateOrganizationInput {
  name: String
  currency: String
}

type Query {
  organizations: [Organization]
  currentEmployee(organizationId: ID!): Employee
  dataSources(organizationId: ID!): [DataSourceInterface]
  dataSource(
    dataSourceId: ID!
    requestParams: DataSourceRequestParams
  ): DataSourceInterface
  employeeEmails(employeeId: ID!): [EmployeeEmail]
  invitations: [Invitation]
  organizationFeatures(organizationId: ID!): JSONObject
  optscaleMode(organizationId: ID!): OptscaleMode
  organizationThemeSettings(organizationId: ID!): JSONObject
  organizationPerspectives(organizationId: ID!): JSONObject
}

type Mutation {
  createDataSource(
    organizationId: ID!
    params: CreateDataSourceInput!
  ): DataSourceInterface
  updateDataSource(
    dataSourceId: ID!
    params: UpdateDataSourceInput!
  ): DataSourceInterface
  updateEmployeeEmails(
    employeeId: ID!
    params: UpdateEmployeeEmailsInput!
  ): [EmployeeEmail]
  updateEmployeeEmail(
    employeeId: ID!
    params: UpdateEmployeeEmailInput!
  ): EmployeeEmail
  deleteDataSource(dataSourceId: ID!): String
  createOrganization(organizationName: String!): Organization
  updateOrganization(
    organizationId: ID!
    params: UpdateOrganizationInput!
  ): Organization
  deleteOrganization(organizationId: ID!): String
  updateInvitation(invitationId: String!, action: String!): String
  updateOptscaleMode(
    organizationId: ID!
    value: OptscaleModeParams
  ): OptscaleMode
  updateOrganizationThemeSettings(
    organizationId: ID!
    value: JSONObject!
  ): JSONObject
  updateOrganizationPerspectives(
    organizationId: ID!
    value: JSONObject!
  ): JSONObject
}
