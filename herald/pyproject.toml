[project]
name = "herald"
version = "0.1.0"
requires-python = ">=3.12.11,<3.13"
dependencies = [
    "alembic==1.13.1",
    "auth-client",
    "boto3==1.34.7",
    "config-client",
    "jinja2==3.1.6",
    "mysql-connector-python==9.1.0",
    "netaddr==0.8.0",
    "optscale-exceptions",
    "pika==1.1.0",
    "requests==2.32.4",
    "sqlalchemy==1.3.24",
    "tornado==6.5",
]

[tool.uv.sources]
config-client = { path = "../optscale_client/config_client" }
auth-client = { path = "../optscale_client/auth_client" }
optscale-exceptions = { path = "../tools/optscale_exceptions" }
herald-client = { path = "../optscale_client/herald_client" }
check-alembic-down-revisions = { path = "../tools/check_alembic_down_revisions" }

[dependency-groups]
dev = [
    "check-alembic-down-revisions",
    "coverage==7.5",
    "freezegun==1.5.2",
    "herald-client",
    "pytest==7.4.0",
    "pytest-cov==6.1.1",
    "pytest-mock==3.14.0",
    "ruff==0.11.13",
]
[build-system]
requires = ["uv_build"]
build-backend = "uv_build"

[tool.uv.build-backend]
module-root = ".."
module-name = "herald"

[tool.pytest.ini_options]
testpaths = ["herald/herald_server/tests", "herald/modules/tests/"]
pythonpath = "."
addopts = "--cov=herald --cov-report=term-missing:skip-covered"

[tool.coverage.run]
branch = true
source = ["herald"]
omit = [
    "herald/modules/tests/*.py",
    "herald/modules/tests/email_generator/*.py",
]
relative_files = true

[tool.coverage.report]
show_missing = true
exclude_lines = ["pragma: no cover", "pragma: no branch", "NotImplementedError"]

[tool.ruff]
line-length = 120
target-version = "py312"
output-format = "full"
extend-exclude = ["send_templates.py"]

[tool.ruff.lint]
preview = true
select = [
    "E",   # w errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade,
    "PT",  # flake8-pytest-style
    "T10", # flake8-pytest-style
]
ignore = [
    "PT001", # Use `@pytest.fixture()` over `@pytest.fixture`
    "PT009", # Use a regular `assert` instead of unittest-style `assertEqual`
    "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
    "PT023", # @pytest.mark.parametrize` is missing required arguments
    "B008",  # do not perform function calls in argument defaults
    "B904",  # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling,
    "UP031", # Use format specifiers instead of percent format
]

[tool.ruff.format]
preview = true
quote-style = "double"
docstring-code-format = true
